package dagger.spi.model;


/**
 * Represents the different kinds of {@link Binding}s that can exist in a binding graph.
 * <p>
 * 用于表示不同的绑定类型，存在于绑定图形中
 */
public enum BindingKind {

    /**
     * A binding for an {@link javax.inject.Inject}-annotated constructor.
     * <p>
     * 表示Inject修饰的构造函数
     */
    INJECTION,

    /**
     * A binding for a {@link dagger.Provides}-annotated method.
     * <p>
     * 表示Provides修饰方法
     */
    PROVISION,

    /**
     * A binding for an {@link javax.inject.Inject}-annotated constructor that contains at least one
     * {@link dagger.assisted.Assisted}-annotated parameter.
     * <p>
     * 使用AssistedInject注解修饰
     */
    ASSISTED_INJECTION,

    /**
     * A binding for an {@link dagger.assisted.AssistedFactory}-annotated type.
     * <p>
     * 表示使用AssistedFactory修饰
     */
    ASSISTED_FACTORY,

    /**
     * An implicit binding for a {@link dagger.Component}- or {@link
     * dagger.producers.ProductionComponent}-annotated type.
     * <p>
     * 表示使用Component或ProductionComponent修饰的component节点生成一个ProvisionBinding绑定对象
     */
    COMPONENT,

    /**
     * A binding for a provision method on a component's {@linkplain dagger.Component#dependencies()
     * dependency}.
     * <p>
     * Component#dependencies里面的类的方法生成的ProvisionBinding
     */
    COMPONENT_PROVISION,

    /**
     * A binding for an instance of a component's {@linkplain dagger.Component#dependencies()
     * dependency}.
     * <p>
     * componentAnnotation#dependencies()里面的类生成ProvisionBinding绑定对象
     */
    COMPONENT_DEPENDENCY,

    /**
     * A binding for a {@link dagger.MembersInjector} of a type.
     * <p>
     * componentMethod返回类型或componentMethod唯一参数类型关联的Inject修饰的变量或方法 的方法参数是MembersInjector类型生成的绑定；
     */
    MEMBERS_INJECTOR,

    /**
     * A binding for a subcomponent creator (a {@linkplain dagger.Subcomponent.Builder builder} or
     * {@linkplain dagger.Subcomponent.Factory factory}).
     * <p>
     * 1. component中的方法返回类型是一个subcomponent.Builder（表示的是一个Builder）， 那么使用当前方法和该方法所在的component类生成一个ProvisionBinding对象
     * 2. component关联的moduleAnnotation#subcomponent里面的subcomponent用于生成的ProvisionBinding
     *
     * @since 2.22 (previously named {@code SUBCOMPONENT_BUILDER})
     */
    SUBCOMPONENT_CREATOR,

    /**
     * A binding for a {@link dagger.BindsInstance}-annotated builder method.
     * <p>
     * BindsInstance修饰的方法（或方法参数），该方法作为bindingElement，该参数根据RequestKind剥离外壳作为type生成key——生成ProvisionBinding对象
     */
    BOUND_INSTANCE,

    /**
     * A binding for a {@link dagger.producers.Produces}-annotated method.
     * <p>
     * Produces修饰的方法
     */
    PRODUCTION,

    /**
     * A binding for a production method on a production component's {@linkplain
     * dagger.producers.ProductionComponent#dependencies()} dependency} that returns a {@link
     * com.google.common.util.concurrent.ListenableFuture} or {@link
     * com.google.common.util.concurrent.FluentFuture}. Methods on production component dependencies
     * that don't return a future are considered {@linkplain #COMPONENT_PROVISION component provision
     * bindings}.
     * <p>
     * ProductionComponent#dependencies里面的类的方法生成ProductionBinding
     */
    COMPONENT_PRODUCTION,

    /**
     * A synthetic binding for a multibound set that depends on individual multibinding {@link
     * #PROVISION} or {@link #PRODUCTION} contributions.
     * <p>
     * 合成的Set绑定，该绑定会同时依赖Provides或Produces
     */
    MULTIBOUND_SET,

    /**
     * A synthetic binding for a multibound map that depends on the individual multibinding {@link
     * #PROVISION} or {@link #PRODUCTION} contributions.
     * <p>
     * 合成的Map绑定，该绑定会同时依赖Provides或Produces
     */
    MULTIBOUND_MAP,

    /**
     * A synthetic binding for {@code Optional} of a type or a {@link javax.inject.Provider}, {@link
     * dagger.Lazy}, or {@code Provider} of {@code Lazy} of a type. Generated by a {@link
     * dagger.BindsOptionalOf} declaration.
     * <p>
     * component的componentMethod方法返回类型 或componentMethod唯一参数里面的Inject修饰的变量或方法参数表示的requestKey， 如果存在Optional<T>,
     * 该T生成的key能够匹配上 （component节点关联的module关联的BindsOptionalOf修饰的bindingMethod方法生成）的OptionalBindingDeclaration对象，
     * 该requestKey生成的ContributionBinding绑定对象类型；
     */
    OPTIONAL,

    /**
     * A binding for {@link dagger.Binds}-annotated method that that delegates from requests for one
     * key to another.
     * <p>
     * 使用Binds修饰的bindingMethod方法;
     */
    // TODO(dpb,ronshapiro): This name is confusing and could use work. Not all usages of @Binds
    // bindings are simple delegations and we should have a name that better reflects that
    DELEGATE,

    /**
     * A binding for a members injection method on a component.
     * <p>
     * 生成的MembersInjectionBinding对象.
     */
    MEMBERS_INJECTION,
    ;

    /**
     * Returns {@code true} if this is a kind of multibinding (not a contribution to a multibinding,
     * but the multibinding itself).
     */
    public boolean isMultibinding() {
        switch (this) {
            case MULTIBOUND_MAP:
            case MULTIBOUND_SET:
                return true;

            default:
                return false;
        }
    }
}
