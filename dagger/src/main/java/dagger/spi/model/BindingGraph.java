package dagger.spi.model;

import dagger.Module;

/**
 * A graph of bindings, dependency requests, and components.
 * <p>
 * 绑定，依赖请求和components形成的有向图
 *
 * <p>A {@link BindingGraph} represents one of the following:
 * <p>
 * 下面表示的是有向图三种呈现形式
 *
 * <ul>
 *   <li>an entire component hierarchy rooted at a {@link dagger.Component} or {@link
 *       dagger.producers.ProductionComponent}
 * <p>
 *       从根Component或ProductionComponent开始关联的整个结构生成有向图
 *
 *   <li>a partial component hierarchy rooted at a {@link dagger.Subcomponent} or {@link
 *       dagger.producers.ProductionSubcomponent} (only when the value of {@code
 *       -Adagger.fullBindingGraphValidation} is not {@code NONE})
 * <p>
 *      以Subcomponent或ProductionSubcomponent为根关联的部分结构生成有向图
 *
 *   <li>the bindings installed by a {@link Module} or {@link dagger.producers.ProducerModule},
 *       including all subcomponents generated by {@link Module#subcomponents()} ()} and {@link
 *       dagger.producers.ProducerModule#subcomponents()} ()}
 * <p>
 *      Module或ProducerModule#subcomponents里面所有subcomponent组件的实例化构建有向图
 * </ul>
 * <p>
 * In the case of a {@link BindingGraph} representing a module, the root {@link ComponentNode} will
 * actually represent the module type. The graph will also be a {@linkplain #isFullBindingGraph()
 * full binding graph}, which means it will contain all bindings in all modules, as well as nodes
 * for their dependencies. Otherwise it will contain only bindings that are reachable from at least
 * one {@linkplain #entryPointEdges() entry point}.
 * <p>
 * 在 {@link BindingGraph} 代表模块的情况下，根 {@link ComponentNode} 将实际代表模块类型。
 * 该图还将是一个 {@linkplain #isFullBindingGraph() 完整绑定图}，这意味着它将包含所有模块中的所有绑定，以及它们的依赖项的节点。
 * 否则，它将仅包含可从至少一个 {@linkplain #entryPointEdges() 入口点}访问的绑定。
 *
 * <h3>Nodes</h3>
 *
 * <p>There is a <b>{@link Binding}</b> for each owned binding in the graph. If a binding is owned
 * by more than one component, there is one binding object for that binding for every owning
 * component.
 * <p>
 * 对于图中的每个拥有的绑定，都有一个 <b>{@link Binding}</b>。 如果一个绑定被多个组件拥有，那么每个拥有组件的绑定都有一个绑定对象。
 *
 * <p>There is a <b>{@linkplain ComponentNode component node}</b> (without a binding) for each
 * component in the graph.
 * <p>
 * 图中的每个组件都有一个<b>{@linkplain ComponentNode 组件节点}</b>（没有绑定）。
 *
 * <h3>Edges</h3>
 *
 * <p>There is a <b>{@linkplain DependencyEdge dependency edge}</b> for each dependency request in
 * the graph. Its target node is the binding for the binding that satisfies the request. For entry
 * point dependency requests, the source node is the component node for the component for which it
 * is an entry point. For other dependency requests, the source node is the binding for the binding
 * that contains the request.
 * <p>
 * 对于图中的每个依赖请求，都有一个 <b>{@linkplain DependencyEdge 依赖边}</b>。它的目标节点是满足请求的绑定的绑定。
 * 对于入口点依赖请求，源节点是它作为入口点的组件的组件节点。对于其他依赖请求，源节点是包含请求的绑定的绑定。
 *
 * <p>There is a <b>subcomponent edge</b> for each parent-child component relationship in the graph.
 * The target node is the component node for the child component. For subcomponents defined by a
 * {@linkplain SubcomponentCreatorBindingEdge subcomponent creator binding} (either a method on the
 * component or a set of {@code @Module.subcomponents} annotation values), the source node is the
 * binding for the {@code @Subcomponent.Builder} type. For subcomponents defined by {@linkplain
 * ChildFactoryMethodEdge subcomponent factory methods}, the source node is the component node for
 * the parent.
 * <p>
 * 对于图中的每个父子组件关系，都有一个<b>子组件边</b>。目标节点是子组件的组件节点。
 * 对于由 {@linkplain SubcomponentCreatorBindingEdge 子组件创建者绑定}（组件上的方法或一组 {@code @Module.subcomponents} 注释值）定义的子组件，
 * 源节点是 {@code @Subcomponent 的绑定。生成器} 类型。对于由 {@linkplain ChildFactoryMethodEdge subcomponent factory methods} 定义的子组件，
 * 源节点是父节点的组件节点。
 *
 * <p><b>Note that this API is experimental and will change.</b>
 *  <p><b>请注意，此 API 是实验性的，会发生变化。</b>
 */
public abstract class BindingGraph {


    /**
     * An edge in the binding graph. Either a {@link DependencyEdge}, a {@link
     * ChildFactoryMethodEdge}, or a {@link SubcomponentCreatorBindingEdge}.
     *
     * 绑定图形的边，有三种样式
     */
    public interface Edge {}
}
